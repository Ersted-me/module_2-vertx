import com.github.spotbugs.snom.Confidence
import com.github.spotbugs.snom.Effort

plugins {
    id 'java'
    id 'org.openapi.generator' version "$orgOpenapiGenerator"
    id 'checkstyle'
    id 'jacoco'
    id 'com.github.spotbugs' version '6.0.15'
}

group = 'ru.ersted'
version = '0.0.1'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of("$javaVersion")
    }
}

sourceSets {
    main {
        java {
            srcDir "$buildDir/generated/src/main/java"
        }
    }
}

jacoco {
    toolVersion = "0.8.10"
}

repositories {
    mavenCentral()
}

dependencies {
    implementation "io.vertx:vertx-core:$vertxVersion"
    implementation "io.vertx:vertx-web:$vertxVersion"
    implementation "io.vertx:vertx-config:$vertxVersion"
    implementation "io.vertx:vertx-pg-client:$vertxVersion"

    testImplementation 'org.testcontainers:testcontainers:1.19.3'
    testImplementation 'org.testcontainers:postgresql:1.19.3'
    testImplementation platform("org.junit:junit-bom:$orgJunitJunitBom")
    testImplementation 'org.junit.jupiter:junit-jupiter'

    // FLYWAY
    implementation "org.flywaydb:flyway-core:$flywayVersion"
    implementation "org.flywaydb:flyway-database-postgresql:$flywayVersion"
    implementation "org.postgresql:postgresql:$orgPostgresqlPostgresql"

    // OPENAPI
    implementation "com.fasterxml.jackson.core:jackson-annotations:$comFasterxmlJacksonCoreJacksonAnnotations"
    implementation "com.fasterxml.jackson.core:jackson-databind:$comFasterxmlJacksonCoreJacksonDatabind"
    compileOnly "jakarta.annotation:jakarta.annotation-api:$jakartaAnnotationJakartaAnnotationApi"


    // MAPSTRUCT
    implementation "org.mapstruct:mapstruct:$mapstructVersion"
    annotationProcessor "org.mapstruct:mapstruct-processor:$mapstructVersion"
    annotationProcessor "org.projectlombok:lombok-mapstruct-binding:$lombokMapstructBinding"

    // LOMBOK
    compileOnly "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"

    // DATABASE Utils
    implementation "com.ongres.scram:client:$comOngresScramClient"

    // LOG
    implementation "org.slf4j:slf4j-api:$slf4jVersion"
    runtimeOnly "org.slf4j:slf4j-simple:$slf4jVersion"

    // HEALTH-CHECK
    implementation "io.vertx:vertx-health-check:$vertxVersion"

    // METRICS
    implementation "io.vertx:vertx-micrometer-metrics:$vertxVersion"
    implementation "io.micrometer:micrometer-registry-prometheus:1.12.3"

    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.17.1"

}

test {
    useJUnitPlatform()
}

openApiGenerate {
    generatorName = 'java'
    inputSpec = file('src/main/resources/api/openapi.yaml')
            .toURI()
            .toString()
    outputDir = layout.buildDirectory
            .dir('generated')
            .get().asFile.absolutePath

    modelPackage = 'ru.ersted.module_2vertx.dto.generated'
    apiPackage = 'com.example.stub.api'

    globalProperties = [models: '']

    configOptions = [
            useJakartaEe              : 'true',
            constructorWithAllArgs     : 'true',
            dateLibrary               : 'java8',
            library                   : 'resttemplate',
            generateModelTests        : 'false',
            generateModelDocumentation: 'false',
            generateApiTests          : 'false',
            generateApiDocumentation  : 'false'
    ]
}

compileJava {
    dependsOn tasks.openApiGenerate
    source layout.buildDirectory.dir('generated/src/main/java')
}


jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

checkstyle {
    toolVersion = '10.12.2'
}

spotbugs {
    toolVersion = '4.7.3'
    ignoreFailures = false
    effort = Effort.valueOf('MAX')
    reportLevel = Confidence.valueOf('LOW')
}

spotbugsMain {
    reports {
        html.required = true
        xml.required = false
    }
}

